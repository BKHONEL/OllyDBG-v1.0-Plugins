T && plineBf->line > 1)
				plineBf = (t_wndprog_data *) Getsortedbyselection(&(ollylang->wndProg.data),plineBf->line-1);

		//t_wndprog_data *plineAf = (t_wndprog_data *) Getsortedbyselection(&(ollylang->wndProg.data),pline->line+1);
		//if (plineAf != NULL)
		//	while (plineAf->type == PROG_TYPE_COMMENT && plineAf->line < ollylang->script.size())
		//		plineAf = (t_wndprog_data *) Getsortedbyselection(&(ollylang->wndProg.data),plineAf->line+1);
	}

	int p;

    ret = sprintf(s,"");

	switch (column) 
	{
		case 0:
			if (pline->line>0)
			  ret = sprintf(s, "%d", pline->line);
			else if (pline->line==-1)
			  ret = sprintf(s, "LOAD");

			if (pline->type & PROG_TYPE_COMMENT) //comment
			{
				*select=DRAW_MASK;
				memset(mask,DRAW_GRAY,ret);
			}
			if (pline->pause) 
			{
				//Hilite Breakpoint
				*select=DRAW_MASK;
				memset(mask,DRAW_BREAK,ret);

			}
			else if (pline->line == ollylang->pgr_scriptpos) 
			{
				//Hilite Current Line	
				*select=DRAW_MASK;
				memset(mask,DRAW_EIP,ret);
				
			}
			else if (pline->type & PROG_TYPE_LABEL) 
			{
				*select=DRAW_MASK;
				memset(mask,DRAW_GRAY,ret);
			}
			break;
		case 1:
			if (pline->type & PROG_TYPE_COMMENT) //comment
			{
				ret = sprintf(s, "%s", &pline->command);
				*select=DRAW_MASK;
				memset(mask,DRAW_GRAY,ret);
			}
			else if ((pline->type & PROG_TYPE_LABEL) || pline->line == 0)
			{
				ret = sprintf(s, "%s", &pline->command[1]);
				memset(&s[ret],'_',PROG_CMD_LEN-ret);
				ret=PROG_CMD_LEN;
				*select=DRAW_MASK;
				memset(mask,DRAW_GRAY,ret);				
			}
			else if (pline->type & PROG_TYPE_ASM) {
				ret = sprintf(s, " %s", pline->command);
				*select=DRAW_MASK;
				memset(mask,DRAW_GRAY,ret);
			}
			else 
			{
				ret = sprintf(s, "%s", pline->command);
				memset(mask,DRAW_NORMAL,ret);
			}

			if (pline->line == ollylang->pgr_scriptpos && ret>0) 
			{
				//Hilite Current Line	
				*select=DRAW_MASK;
				memset(mask,DRAW_EIP,ret);			
			}
			else if ((pline->type & PROG_ATTR_EXECUTED) && !(pline->type & PROG_TYPE_COMMENT) && ret>0) 
			{
				//Hilite executed lines
				*select=DRAW_MASK;
				memset(mask,DRAW_HILITE,ret);
			}

			//Error warning
			if (pline->type & PROG_ATTR_ERROR) //error
			{
				*s='!';
				*select=DRAW_MASK;
				*mask=DRAW_BREAK;
			}

			//DRAW JUMP ARROWS 
			if (pline->jumpto > 0) 
			{
				
				if (pline->jumpto < pline->line) 
				{
					*s='U'; 
				} 
				else 
				{
					*s='D';
				}
				*select=DRAW_MASK;
				*mask=DRAW_GRAPH;

			} 
			break;
		case 2:
			if (pline->type & PROG_TYPE_LABEL) 
			{
				ret=PROG_RES_LEN;
				memset(s,'_',ret);
				*select=DRAW_MASK;
				memset(mask,DRAW_GRAY,ret);				
				
				//ret=30;strcpy(s,"N .BIJKESTU<Duvdeijrsfgahztbcl");			
				//ret=30;strcpy(s,"Duvdeijrsfgahztbcl");			
				//memset(mask,DRAW_GRAPH,ret);
			}
			else if (*pline->result != NULL) 
			{
				if (plineBf)
				{
					if (strcmp(plineBf->result,pline->result)==0) 
					{
						//Same result as previous line
						*select=DRAW_MASK;
						*s=' ';	s[1]=D_GRAYPATH;
						ret=2;
						memset(mask,DRAW_GRAPH,ret);
						break;
					}
				}
				ret = sprintf(s, "%s", pline->result);
			}
			else if ((plineBf != NULL) && pline->type == PROG_TYPE_COMMENT)
			{
				if (*plineBf->result != NULL) 
				{
					//Same result as previous line
					*select=DRAW_MASK;
					*s=' ';	s[1]=D_GRAYPATH;
					ret=2;
					memset(mask,DRAW_GRAPH,ret);
					break;
				}			
			}
			break;
		case 3:
			if (pline->type & PROG_TYPE_LABEL) 
			{
				memset(s,'_',9);
				ret=9;
				*select=DRAW_MASK;
				memset(mask,DRAW_GRAY,ret);				
			}
			else if (pline->eip != 0) 
			{
				cpuasm = (t_dump*) Plugingetvalue(VAL_CPUDASM);

				if (plineBf) 
				{
					if (plineBf->eip == pline->eip) 
					{
						
						//if (plineAf)
						//	if (plineAf->eip != pline->eip) goto draw_normal_eip;
						
						*select=DRAW_MASK;
						*s=' ';
						if (cpuasm->sel0 == pline->eip) 
							s[1]=D_PATH;
						else 
							s[1]=D_GRAYPATH;
						ret=2;
						memset(mask,DRAW_GRAPH,ret);
						break;
					}
				}

				//draw_normal_eip:
				ret = sprintf(s, "%08X", pline->eip);
				
				if (cpuasm->sel0 == pline->eip) 
				{
					//Hilite current eip
					*select=DRAW_MASK;
					memset(mask,DRAW_HILITE,ret);				
				}
			}
			else if ((plineBf != NULL) && pline->type == PROG_TYPE_COMMENT)
			{
				if (plineBf->eip != 0) 
				{
					//Same result as previous line
					*select=DRAW_MASK;
					*s=' ';
					cpuasm = (t_dump*) Plugingetvalue(VAL_CPUDASM);
					if (cpuasm->sel0 == plineBf->eip) 
						s[1]=D_PATH;
					else 
						s[1]=D_GRAYPATH;
					ret=2;
					memset(mask,DRAW_GRAPH,ret);
					break;
				}			
			}		
			break;
		case 4:
			if (pline->type & PROG_TYPE_LABEL)
			{   
				memset(s,'_',PROG_VAL_LEN);
				ret=PROG_VAL_LEN;
				*select=DRAW_MASK;
				memset(mask,DRAW_GRAY,ret);
			}
			else if (*pline->values != NULL)
			{
				if (pline->values[0] != ',') 
					ret = sprintf(s, "%s", pline->values);
				else 
				{
					ret = sprintf(s, "%s", &pline->values[1]);
					p = strchr(&pline->values[1],',')-pline->values;
					if (p>0) 
					{
						*select=DRAW_MASK;
						memset(mask,DRAW_NORMAL,ret);
						memset(mask,DRAW_HILITE,p-1);
					}
				}
			}  
			break;

	}

    if (!ret) ret=strlen(s);

  return ret;
}

void InvalidateProgWindow(void)
{
	if (ollylang->wndProg.hw!=NULL)	
		InvalidateRect(ollylang->wndProg.hw, NULL, FALSE);
}

void FocusProgWindow(void)
{
	if (ollylang->wndProg.hw!=NULL)	{
		SetForegroundWindow(ollylang->wndProg.hw);
		SetFocus(ollylang->wndProg.hw);
	}
}

bool editProgLine(t_wndprog_data *ppl) 
{
	string s=ollylang->script[ppl->line-1];
	char buffer[PROG_CMD_LEN]={0};

	strcpy(buffer,(char*)s.c_str());

	if (Gettext("Edit script line...",buffer,0,0,FIXEDFONT)) {

		strcpy(ppl->command," ");
		strncat(ppl->command,buffer,PROG_CMD_LEN-2);
		s.assign(buffer);

		ollylang->script.erase(ollylang->script.begin()+ppl->line-1);
		ollylang->script.insert(ollylang->script.begin()+ppl->line-1,s);

		s=trim(s);
		ppl->type = analyseProgLineType(s,ppl->line);

		InvalidateProgWindow();
		return true;
	}
	return false;
}

int analyseProgLineType(string &scriptline, int linenumber) 
{

	bool bComment=false;
	int p, result;

	string cleanline=scriptline;
	p=scriptline.find("//");
	if (p > 0) {
		if (scriptline.find("\"")!=string::npos) {

			if (p > scriptline.rfind("\"") || p < scriptline.find("\""))
				scriptline.erase(p,scriptline.length()-p);

		} else
			scriptline.erase(p,scriptline.length()-p);
	}
	if (trim(scriptline) == "") {
		scriptline = cleanline;
		bComment = true;
	}

	if (scriptline.find(";")==0) {
		bComment = true;		
	}

	if (bComment) {
		result = PROG_TYPE_COMMENT;
	}
	else {
		if (scriptline.length() > 0) {
			if(scriptline.at(scriptline.length() - 1) == ':') {
				ollylang->labels.insert(pair<string, int>(scriptline.substr(0, scriptline.length() - 1), linenumber));
				result = PROG_TYPE_LABEL;
			}
		}
		if (result != PROG_TYPE_LABEL) {
			result = PROG_TYPE_COMMAND;
		}
	}

	return result;
}

int addProgLine(int line, string & command, int type) 
{

	t_wndprog_data pline={0};

	pline.line = line;
	pline.size = 1;
	strcpy(pline.command," ");
	strncat(pline.command,command.c_str(),PROG_CMD_LEN-2);
	strcpy(pline.result,"");	
	strcpy(pline.values,"");
	if (type)
		pline.type = type;
	else
		pline.type = PROG_TYPE_COMMAND;

	pline.eip = 0;
		
	ollylang->tProgLines.push_back(pline);

	Addsorteddata(&(ollylang->wndProg.data),&(ollylang->tProgLines.back()));
	
	InvalidateProgWindow();

	return 1;
}

//Change type to 2 to hilite executed commands
int setProgLineEIP(int line, int eip) 
{

	if (line>ollylang->script.size()) return false;

	t_wndprog_data *ppl;

	ppl = (t_wndprog_data *) Getsortedbyselection(&(ollylang->wndProg.data),line);

	if (!(ppl->type & PROG_TYPE_ASM))
		ppl->type |= PROG_ATTR_EXECUTED;

	//if (!(ppl->type & PROG_TYPE_COMMAND)
	//	return true;

    ppl->eip = eip;
	
	if (ollylang->wndProg.hw!=NULL)	
	{
		if (!ollylang->require_ollyloop) {
			Selectandscroll(&ollylang->wndProg,ollylang->pgr_scriptpos,2);
			InvalidateProgWindow();
		}
	}

	return true;
}

int setProgLineValue(int line, DWORD value) 
{
	char buf[17];
	sprintf(buf, "%X", value);
	string str(buf);
	return setProgLineValue(line, str);
}

int setProgLineValue(int line, string  &value) 
{

	if (line>ollylang->script.size()) return 0;

	t_wndprog_data *ppl;
	ppl = (t_wndprog_data *) Getsortedbyselection(&(ollylang->wndProg.data),line);

	if (!(ppl->type & PROG_TYPE_COMMAND))
		return 1;

	string values;

	values = CleanString(value);

	//Variable History

	if (ollylang->showVarHistory && strcmp(ppl->values,"")) {
		if ( values.length() < PROG_VAL_LEN-2) {
			if (ppl->values[0] != ',' && ppl->values[0] != '®' && value.compare("®") != 0)
				values += " ";
			values.append(ppl->values);
		}
	}

	strncpy(ppl->values,values.c_str(),PROG_VAL_LEN-1);

	ppl->values[PROG_VAL_LEN-1] = 0;
 
	InvalidateProgWindow();

	return 1;
}

int setProgLineValueFloat(int line, long double value) 
{
	char buf[128];
	sprintf(buf, "%lf", value);
	string str(buf);
	while (true) 
	{
		if (str.length() <= 3) break; 
		if (str[str.length()-1] == '0')
			str.erase(str.length()-1,1);
		else 
			break;
	}
	return setProgLineValue(line, str);
}

int setProgLineResult(int line, var& result)
{
	if (result.vt == DW)
		setProgLineResult(line,result.dw);
	else if (result.vt == FLT)
		setProgLineResultFloat(line,result.flt);
	else {
		if(result.str.length() && !result.isbuf)
			setProgLineResult(line,"\""+result.str+"\"");
		else {
			setProgLineResult(line,result.str);
		}
	}
	InvalidateProgWindow();
	return true;
}

int setProgLineResult(int line, DWORD result) 
{
	char buf[17];
	sprintf(buf, "%X", result);
	string str(buf);
	return setProgLineResult(line, str);
}

int setProgLineResultFloat(int line, long double result) {
	char buf[128];
	sprintf(buf, "%lf", result);
	string str(buf);
	while (true) 
	{
		if (str.length() <= 3) break; 
		if (str[str.length()-1] == '0')
			str.erase(str.length()-1,1);
		else 
			break;
	}
	return setProgLineResult(line, str);
}

int setProgLineResult(int line, string& result)
{

	if (line>ollylang->script.size()) return 0;
	
	char values[PROG_VAL_LEN];
	t_wndprog_data *ppl;
	
	ppl = (t_wndprog_data *) Getsortedbyselection(&(ollylang->wndProg.data),line);
	
	if (ppl->type & PROG_TYPE_LABEL)
		return false;

	strncpy(ppl->result,CleanString(result).c_str(),PROG_RES_LEN);
	if (strcmp(ppl->values,"")) 
	{
		if (ppl->values[0] != ',') 
		{
			strcpy(values,ppl->values);
			strncpy(&ppl->values[1],values,PROG_VAL_LEN-2);
			ppl->values[0]=',';
		}
	}

	return true;
}

void clearProgLines()
{
	ollylang->pgr_scriptpos=0;
	if (!ollylang->tProgLines.empty())
	{
		Deletesorteddatarange(&(ollylang->wndProg.data),0,0xffffffff);
		ollylang->tProgLines.clear();
		InvalidateProgWindow();
	}
}

void resetProgLines()
{
	vector<t_wndprog_data>::iterator iter=ollylang->tProgLines.begin();
	int line=0;
	t_wndprog_data *ppl;

	while (iter!=ollylang->tProgLines.end())
	{	
		ppl = (t_wndprog_data *) Getsortedbyselection(&(ollylang->wndProg.data),line);
		
		//reset executed color
		if ((ppl->type & PROG_TYPE_COMMAND)) //ignore labels/comments
			ppl->type &= PROG_TYPE_COMMAND;
		
		strcpy(ppl->result,"");	
		strcpy(ppl->values,"");
		
		//ppl->jumpto = 0;
		ppl->eip = 0;

		line++;
		iter++;
	}
	InvalidateProgWindow();
}


int getProgLineType(int line) 
{
	t_wndprog_data *ppl;
	ppl = (t_wndprog_data *) Getsortedbyselection(&(ollylang->wndProg.data),line);
	if (ppl==NULL)
		return false; 

	return (ppl->type & PROG_TYPE);

}

int setProgLineAttr(int line,int type) 
{
	t_wndprog_data *ppl;
	ppl = (t_wndprog_data *) Getsortedbyselection(&(ollylang->wndProg.data),line);
	if (ppl==NULL)
		return false;

	ppl->type &= PROG_TYPE;
	ppl->type |= type;

	return true;
}

int isProgLineComment(int line) 
{

	t_wndprog_data *ppl;
	ppl = (t_wndprog_data *) Getsortedbyselection(&(ollylang->wndProg.data),line);
	if (ppl==NULL)
		return false;

	if (ppl->type & PROG_TYPE_COMMENT) 
	{
		return true;
	}

	return false;

}

int isProgLineBP(int line) 
{

	t_wndprog_data *ppl;
	ppl = (t_wndprog_data *) Getsortedbyselection(&(ollylang->wndProg.data),line);
	if (ppl==NULL)
		return false;
	
	if (ppl->pause && ollylang->wndProg.hw) 
	{
		focusonstop=4;
	}

	return ppl->pause;

}

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                